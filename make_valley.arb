# def make_valley

# testing(make_valley([17, 17, 15, 14, 8, 7, 7, 5, 4, 4, 1]), [17, 15, 8, 7, 4, 1, 4, 5, 7, 14, 17])
# testing(make_valley([14, 10, 8]), [14, 8, 10])
# testing(make_valley([20, 18, 17, 13, 12, 12, 10, 9, 4, 2, 2, 1, 1]), [20, 17, 12, 10, 4, 2, 1, 1, 2, 9, 12, 13, 18])
# testing(make_valley([20, 7, 6, 2]), [20, 6, 2, 7])
# testing(make_valley([20, 16, 14, 10, 1]), [20, 14, 1, 10, 16])
# testing(make_valley([19, 19, 18, 14, 12, 11, 9, 7, 4]), [19, 18, 12, 9, 4, 7, 11, 14, 19])
# testing(make_valley([20, 18, 16, 15, 14, 14, 13, 13, 10, 9, 4, 4, 4, 1]), [20, 16, 14, 13, 10, 4, 4, 1, 4, 9, 13, 14, 15, 18])
# testing(make_valley([20, 20, 16, 14, 12, 12, 11, 10, 3, 2]), [20, 16, 12, 11, 3, 2, 10, 12, 14, 20])
# testing(make_valley([19, 17, 16, 15, 13, 8, 5, 5, 4, 4, 4]), [19, 16, 13, 5, 4, 4, 4, 5, 8, 15, 17])
# testing(make_valley([19, 8, 6]), [19, 6, 8])

# get an array
# split it in two - every second element in the second array
# merge them together
# return merged array



def make_valley(arr)
  1, 2 = []
  arr.each do |a, b|
      1 << a
      2 << b
    end
end

def make_valley(arr)
  arr_1, arr_2 = []
  arr.each_with_index do | element, index |
    if index.even?
      arr_1 << element
    else
      arr_2 << element
    end
  end
end

def make_valley(arr)
  arr_1, arr_2 = []
  arr.each do |a,b|
    arr_1 << a
    arr_2 << b
  end
end

arr = [17, 17, 15, 14, 8, 7, 7, 5, 4, 4, 1]

# working
def make_valley(arr)
  arr_1, arr_2 = [], []
  arr.each_slice(2).each do |ele|
    arr_1 << ele[0]
    arr_2 << ele[1]
  end
  arr_1, arr_2 = arr_1.compact, arr_2.compact
  arr_1 + arr_2.reverse
end

# Final Solution
def make_valley(arr)
  arr_1, arr_2 = [], []
  arr.each_slice(2).each { |ele| arr_1 << ele[0] | arr_2 << ele[1] }
  arr_1.compact + arr_2.compact.reverse
end
